<br />
<br />
<br />
<h1>View Phone Book</h1>
<br />
<br />
<br />


<head>
    <script src="https://code.jquery.com/jquery-3.5.1.js"></script>
    <script type="text/javascript" src="https://cdn.datatables.net/1.10.24/js/jquery.dataTables.min.js"></script>
    <link href="https://cdn.datatables.net/1.10.24/css/jquery.dataTables.min.css" rel="stylesheet">
</head>

<!-- Begin Page Content -->
<div class="container-fluid">


    <table id="table_id" class="display">
        <thead>
            <tr>
                <th>Phonebook Name</th>
                <th>Entry Name</th>
                <th>Phone number</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>

</div>


<script type="text/javascript">
    $(document).ready(function () {

        getTableData();

        function initializeTable(dataSet) {
            $(document).ready(function () {
                $('#table_id').DataTable({
                    data: dataSet,
                    columns: [
                        { title: 'Phonebook Name', data: 'phonebookName' },
                        { title: 'Entry Name', data: 'name' },
                        { title: 'Phone number', data: 'phoneNumber' }
                    ]
                });
            });
        }

        async function getTableData() {

            var phonebooksUrls = 'https://localhost:44389/api/phonebooks';
            var entriesUrls = 'https://localhost:44389/api/entries';

            try {
                let phonebooksData = await fetchUrl(phonebooksUrls);
                let entriesData = await fetchUrl(entriesUrls);
                let dataSet = merge(phonebooksData, entriesData);
                
                initializeTable(dataSet);
            } catch (err) {
                console.log(err);
            }
        }

        function fetchUrl(url) {
            return $.ajax({
                url: url,
                type: 'GET'
            });
        };

        function merge(phonebooksData, entriesData) {

            // create a map for phonebook ID to phonebook name:
            let phonebookMap = new Map();
            phonebooksData.forEach((phonebk) => {
                phonebookMap.set(phonebk.phonebookId, phonebk.name);
            })

            // phonebook
            for (let phonebooksList of phonebookMap.keys()) {
                //console.log(phonebooksList);
            }

            // add phonebook name to entry record:
            entriesData.forEach((entryInfo) => {
                entryInfo['phonebookName'] = phonebookMap.get(entryInfo['phonebookId']);
            })

            return entriesData;
        }

    });
</script>